/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package se.slackers.stml;

import picocli.AutoComplete;
import picocli.CommandLine;
import se.slackers.stml.command.CompileCommand;
import se.slackers.stml.command.GenerateCommand;
import se.slackers.stml.command.WatchCommand;
import se.slackers.stml.mapper.SourcePositionId;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.Callable;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import static java.lang.System.err;

@CommandLine.Command(
        name = "stml",
        versionProvider = VersionProvider.class,
        subcommands = {CommandLine.HelpCommand.class, AutoComplete.GenerateCompletion.class}
)
public class Main implements Callable<Integer> {
    static {
        try {
            InputStream stream = Main.class.getClassLoader().getResourceAsStream("logging.properties");
            LogManager.getLogManager().readConfiguration(stream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static final Logger logger = Logger.getLogger(Main.class.getName());

    public static void main(String[] args) {
        logger.info("Starting STML v" + Main.class.getPackage().getImplementationVersion());

        System.exit(new CommandLine(new Main())
                .setExecutionExceptionHandler(new STMLExceptionHandler())
                .addSubcommand(new GenerateCommand())
                .addSubcommand(new CompileCommand())
                .addSubcommand(new WatchCommand())
                .execute(args));
    }

    @CommandLine.Option(names = {"-V", "--version"}, versionHelp = true, description = "display version info")
    private boolean versionInfoRequested;

    @CommandLine.Option(names = {"-h", "--help"}, usageHelp = true, description = "display this help message")
    private boolean usageHelpRequested;

    @CommandLine.Spec
    private CommandLine.Model.CommandSpec spec;

    @Override
    public Integer call() throws Exception {
        spec.commandLine().usage(System.err);
        return ExitCode.RET_SYNTAX;
    }

    public static void reportError(SourcePositionId position, String format, Object... args) {
        if (position == null) {
            err.println("ERROR: " + String.format(format, args));
            return;
        }
        err.println(position.format() + ": " + String.format(format, args));
    }
}
